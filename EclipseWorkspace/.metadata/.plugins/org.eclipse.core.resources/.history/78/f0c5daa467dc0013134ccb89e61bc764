package worms.model;

public abstract class StatementAction extends Statement {
	
	public StatementAction(int line, int column) {
		super(line, column);
	}
	
	public StatementAction( int line, int column, Expression e ) {
		super(line, column, new Expression[] {e});
	}
	
	protected abstract void doAction();
	
	@Override
	public void execute() {
		if (!getRootProgram().continueExecution())
			return;
		if (getRootProgram().getCurrentLine() > getLine())
			return;
		if (getRootProgram().getCurrentColumn() > getColumn())
			return;
		preExecute();
		
		doAction();
		
		if ( getActionType() == SAction.StatementAction.TURN ) {
		}
		if ( getActionType() == SAction.StatementAction.MOVE ) {
		}
		if ( getActionType() == SAction.StatementAction.JUMP ) {
			Program program = getRootProgram();
			Worm worm = program.getWorm();
		}
		if ( getActionType() == SAction.StatementAction.TOGGLEWEAP ) {
			Program program = getRootProgram();
			Worm worm = program.getWorm();
			if ( !worm.canMove() )
				program.stopProgram();
			getRootProgram().getHandler().toggleWeapon(worm);
			return;
		}
		if ( getActionType() == SAction.StatementAction.FIRE ) {
			Program program = getRootProgram();
			Worm worm = program.getWorm();
			if ( !worm.canShoot() )
				program.stopProgram();
			if ( !(getExpressions().get(0).evaluate().getValue() instanceof Number) )
				program.typeErrorOccurred();
			getRootProgram().getHandler().fire(worm, (int)Math.floor(((Type<Double>)getExpressions().get(0).evaluate()).getValue()));
			return;
		}
		if ( getActionType() == SAction.StatementAction.SKIP ) {
			// do nothing
			return;
		}
		program.typeErrorOccurred();

	}

}
