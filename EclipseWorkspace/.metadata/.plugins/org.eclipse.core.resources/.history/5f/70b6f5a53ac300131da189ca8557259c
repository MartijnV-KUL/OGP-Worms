package worms.model;

import java.util.ArrayList;

import be.kuleuven.cs.som.annotate.Basic;

public class Team {
	
	public Team(String name) {
		setName(name);
	}
	
	// {{ name related
	
	private String name;
	
	public String getName() {
		return name;
	}
	
	public static boolean isValidName(String name) {
		if (!name.matches("[a-zA-Z]*"))
			return false;
		if (!Character.isUpperCase(name.charAt(0)))
			return false;
		if (name.length() < 2)
			return false;
		return true;
	}
	
	public void setName(String name) {
		if (!isValidName(name))
			throw new ModelException("Invalid team name.");
		this.name = name;
	}
	
	// }}
	
	// {{ association related
	
	private ArrayList<Worm> worms = new ArrayList<Worm>();
	
	public void addWorm(Worm worm) {
		if (canHaveAsWorm(worm))
			throw new ModelException("Invalid worm specified.");
		worm.setTeam(this);
		worms.add(worm);
	}
	
	public boolean canHaveAsWorm(Worm worm) {
		if (worm==null)
			return false;
		if (worm.isTerminated())
			return false;
		return true;
	}
	
	public boolean hasAsWorm(Worm worm) {
		return worms.contains(worm);
	}
	
	@Basic
	public ArrayList<Worm> getWorms() {
		return worms;
	}
	
	public void removeWorm(Worm worm) {
		if (!hasAsWorm(worm))
			throw new ModelException("Worm not found.");
		worm.removeTeam();
		worms.remove(worm);
	}
	
	public void removaAllWorms() {
		for ( Worm worm : worms ) {
			removeWorm(worm);
		}
	}
	
	
	// }}
	
	
	/**
	 * Returns an ArrayList of all worms that are alive. The ArrayList contains references to the original worms, not cloned worms.
	 * @return
	 */
	public ArrayList<Worm> getLiveWorms() {
		ArrayList<Worm> liveWorms = new ArrayList<Worm>();
		for ( Worm worm : worms ) {
			if (worm.isAlive())
				liveWorms.add(worm);
		}
		return liveWorms;
	}
	
	
	
}
