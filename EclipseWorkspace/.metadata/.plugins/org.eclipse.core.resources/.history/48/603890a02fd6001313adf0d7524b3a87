package worms.model;

import worms.model.Expression.Types;

public class ExpressionDouble extends Expression {
	
	public ExpressionDouble(Types expressionType, Type<?> e1, Type<?> e2) {
		super(expressionType);
		this.e1 = e1;
		this.e2 = e2;
	}
	
	private Type<?> e1;
	private Type<?> e2;

	@Override
	public Type<?> evaluate() {
		if (getExpressionType()==Types.ADDITION) {
			if ( !(e1 instanceof Type<Double>) || !(e2 instanceof Type<Double>) )
				throw new ModelException("TYPE ERROR: "); //TODO do something else than throwing an exception?
			return new Type<Double>(e1.getValue()+e2.getValue());
		}
		if (getExpressionType()==Types.SUBTRACTION)
			return null;
		if (getExpressionType()==Types.MULTIPLICATION)
			return null;
		if (getExpressionType()==Types.DIVISION)
			return null;
		if (getExpressionType()==Types.SQUAREROOT)
			return null;
		if (getExpressionType()==Types.SINE)
			return null;
		if (getExpressionType()==Types.COSINE)
			return null;
		if (getExpressionType()==Types.CONJUNCTION)
			return null;
		if (getExpressionType()==Types.DISJUNCTION)
			return null;
		if (getExpressionType()==Types.NEGATION)
			return null;
		if (getExpressionType()==Types.LESSTHAN)
			return null;
		if (getExpressionType()==Types.LESSTHANOREQUALTO)
			return null;
		if (getExpressionType()==Types.GREATERTHAN)
			return null;
		if (getExpressionType()==Types.GREATERTHANOREQUALTO)
			return null;
		if (getExpressionType()==Types.EQUALTO)
			return null;
		if (getExpressionType()==Types.DIFFERENTFROM)
			return null;
		throw new ModelException("Evaluation of expression failed."); //TODO do something else than throwing an exception?
	}

}
