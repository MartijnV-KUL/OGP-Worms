package worms.model;

import static org.junit.Assert.*;

import java.util.Random;

import org.junit.Before;
import org.junit.Test;

import worms.util.Util;

/**
 * A class to test all the different methods of the worm class.
 * 
 * @author Niels
 */
public class WormTest {

// {{ Objects

	private static final double EPS = Util.DEFAULT_EPSILON;

	private static Worm worm;

	private static World world;

	//Initialisation of ballisticBody
	private BallisticBody ballisticBody = new Worm(2, 3, Math.PI / 4, 1, "Testworm");

	private Weapon bazooka = new Bazooka();
	private Weapon rifle = new Rifle();

	private Food food = new Food(2, 2);

	private Team team = new Team("FirstTeam");

	private static Random random;

	/*	X X X X
	 *  . . . .
	 *  . . . .
	 *  X X X X	 */
	private boolean[][] passableMap = new boolean[][] {
			{false, false, false, false}, {true,  true,  true,  true},
			{true,  true,  true,  true }, {false, false, false, false}
	};

	// }}

// {{ Setup

	@Before
	public void Setup() {
		worm = new Worm(2, 3, Math.PI / 4, 1, "Testworm");
		random = new Random(7357);
		world = new World(4, 4, passableMap, random);
	}

	// }}

// {{ Tests for constant values

	@Test
	public void test_getMinimalRadius() {
		assertEquals(0.25, worm.getMinimalRadius(), EPS);
	}

	@Test
	public void test_getDensity() {
		assertEquals(1062, Worm.getDensity(), EPS);
	}

	// }}

// {{ Tests for position

	@Test
	public void test_Xcoord() {
		assertEquals(2, worm.getX(), EPS);
	}

	@Test
	public void test_Ycoord() {
		assertEquals(3, worm.getY(), EPS);
	}

	@Test
	public void test_getDirection() {
		assertEquals(Math.PI / 4, worm.getDirection(), EPS);
	}

	@Test
	public void test_setPosition_LegalCase() {			//This tests setX, setY and setDirection automatically.
		worm.setPosition(3, 4, Math.PI);
		assertEquals(3, worm.getX(), EPS);
		assertEquals(4, worm.getY(), EPS);
		assertEquals(Math.PI, worm.getDirection(), EPS);
	}

	@Test
	public void test_isValidX_LegalCase() {
		ballisticBody.setX(2);
	}
	@Test
	public void test_isValidX_isInfinite() {
		ballisticBody.setX(Double.POSITIVE_INFINITY);
	}
	@Test(expected = ModelException.class)
	public void test_isValidX_isNaN() {
		ballisticBody.setX(Double.NaN);		
	}

	@Test
	public void test_isValidY_LegalCAse() {
		ballisticBody.setY(2);
	}
	@Test
	public void test_isValidY_isInfinite() {
		ballisticBody.setY(Double.POSITIVE_INFINITY);
	}
	@Test(expected = ModelException.class)
	public void test_isValidY_isNaN() {
		ballisticBody.setY(Double.NaN);
	}

	@Test
	public void test_isValidDirection_LegalCase() {
		ballisticBody.setDirection(Math.PI / 4);
	}
	@Test(expected = AssertionError.class)
	public void test_isValidDirection_tooLow() {
		ballisticBody.setDirection(- Math.PI);
		assertNotEquals(ballisticBody.getDirection(), -Math.PI, EPS);
	}
	@Test(expected = AssertionError.class)
	public void test_isValidDirection_tooHigh() {
		ballisticBody.setDirection(5*Math.PI);
		assertNotEquals(ballisticBody.getDirection(), 5*Math.PI, EPS);
	}
	@Test(expected = AssertionError.class)
	public void test_isValidDirection_isNaN() {
		ballisticBody.setDirection(Double.NaN);
		assertNotEquals(ballisticBody.getDirection(), Double.NAN, EPS);
	}

	// }}

// {{ Tests for wormnames

	@Test
	public void test_getName() {
		assertEquals("Testworm", worm.getName());
	}

	@Test
	public void test_setName() {
		worm.setName("Dummyworm");
		assertEquals("Dummyworm", worm.getName());
	}

	@Test
	public void test_isValidName_LegalCase() {
		worm.setName("James O'Dummy \"1");
	}
	@Test(expected = ModelException.class)
	public void test_isValidName_wrongChar() {
		worm.setName("Worm!");
	}
	@Test(expected = ModelException.class)
	public void test_isValidName_noUpperChar() {
		worm.setName("worm");
	}
	@Test(expected = ModelException.class)
	public void test_isValidName_tooShort() {
		worm.setName("W");
	}

	// }}

// {{ Tests for radius

	@Test
	public void test_getRadius() {
		assertEquals(1, worm.getRadius(), EPS);
	}

	@Test
	public void test_setRadius() {
		worm.setRadius(2);
		assertEquals(2, worm.getRadius(), EPS);
	}

	@Test
	public void test_isValidRadius_LegalCase() {
		worm.setRadius(2);
	}
	@Test(expected = ModelException.class)
	public void test_isValidRadius_tooLow() {
		worm.setRadius(worm.getMinimalRadius() - 0.1);
	}
	@Test(expected = ModelException.class)
	public void test_isValidRadius_isNaN() {
		worm.setRadius(Double.NaN);
	}

	// }}

// {{ Test for mass

	@Test
	public void test_getMass() {
		assertEquals(4448.495197, worm.getMass(), EPS);
	}

	// }}

// {{ Tests for actionpoints

	@Test
	public void test_getActionPoints() {
		assertEquals(4448, worm.getActionPoints(), EPS);
	}

	@Test
	public void test_getMaxActionPoints() {
		assertEquals(4448, worm.getMaxActionPoints(), EPS);
	}

	@Test
	public void test_setActionPoints_LegalCase() {			//The next 3 tests automatically test the method "isValidActionPoints"
		worm.setActionPoints(250);
		assertEquals(250, worm.getActionPoints(), EPS);
	}
	@Test
	public void test_setActionPoints_negativeAP() {
		worm.setActionPoints(-50);
		assertEquals(0, worm.getActionPoints(), EPS);
	}
	@Test
	public void test_setActionPoints_tooHigh() {
		worm.setActionPoints(worm.getMaxActionPoints() + 1);
		assertEquals(4448, worm.getActionPoints(), EPS);
	}

	// }}

// {{ Tests for hitpoints & alive worms

	@Test
	public void test_getHitPoints() {
		assertEquals(4448, worm.getHitPoints(), EPS);
	}

	@Test
	public void test_getMaxHitPoints() {
		assertEquals(4448, worm.getMaxHitPoints(), EPS);
	}

	@Test
	public void test_setHitPoints_LegalCase() {			//The next 3 tests automatically test the method "isValidHitPoints"
		worm.setHitPoints(250);
		assertEquals(250, worm.getHitPoints(), EPS);
	}
	@Test(expected = NullPointerException.class)		//the die() call will cause a nullpointerexception.
	public void test_setHitPoints_negativeHP() {
		worm.setHitPoints(-50);
		worm.setWorld(world);
		assertEquals(0, worm.getHitPoints(), EPS);
	}
	@Test
	public void test_setHitPoints_tooHigh() {
		worm.setHitPoints(worm.getMaxHitPoints() + 1);
		worm.setWorld(world);
		assertEquals(4448, worm.getHitPoints(), EPS);
	}

	@Test
	public void test_isAlive_LegalCase() {
		worm.setHitPoints(50);
		assertTrue(worm.isAlive());
	}
	@Test
	public void test_isAlive_noHP() {
		worm.setHitPoints(0);
		assertFalse(worm.isAlive());
	}

	// }}

// {{ Tests for movement

	//Worm is placed at (2,3)
	/*@Test(expected = ModelException.class)		//TODO takes some time
	public void test_move_noAPLeft() {
		worm.setActionPoints(0);
		worm.setWorld(world);
		worm.move();
	}*/

	@Test
	public void test_move_LegalCase() {
		worm.setWorld(world);
		worm.setDirection(0);
		worm.move();
		assertEquals(3, worm.getX(), EPS);
		assertEquals(3, worm.getY(), EPS);
	}
	@Test
	public void testMoveVertical() {
		worm = new Worm(1, 1.5, Math.PI / 2, 0.5, "Test");
		worm.setWorld(world);
		worm.move();
		assertEquals(1, worm.getX(), EPS);
		assertEquals(2.0, worm.getY(), EPS);
	}
	@Test
	public void testMoveVerticalAlongTerrain() {
		// . . X
		// . w X

		world =  new World(3.0, 2.0, new boolean[][] {
				{ true, true, false }, { true, true, false } }, random);
		worm =  new Worm(1.5, 0.5, Math.PI / 2 - 10 * 0.0175, 0.5, "Test");
		worm.setWorld(world);

		worm.move();

		assertEquals(1.5, worm.getX(), EPS);
		assertEquals(1.0, worm.getY(), EPS);
	}


	@Test
	public void test_getMoveDistance() {
		world =  new World(3.0, 2.0, new boolean[][] {
				{ true, true, false }, { true, true, false } }, random);
		worm =  new Worm(1.5, 0.5, Math.PI / 2 - 10 * 0.0175, 0.5, "Test");
		worm.setWorld(world);

		assertEquals(0, worm.getMoveDistance()[0], EPS);	//Compares first value in double array.
		assertEquals(0.5, worm.getMoveDistance()[1], EPS);	//Compares second value in double array.
	}
	@Test
	public void test_getActionPointCostMove() {
		double[] delta = {2.0, 3.0};										// slope is 0.982793723247329
		assertEquals(4, worm.getActionPointCostMove(delta), EPS);		
	}

/*	@Test					//TODO It takes a couple of minutes to check this test...
	public void test_canMove_LegalCase() {
		double[] delta = {2.0, 3.0};
		worm.setActionPoints(worm.getActionPointCostMove(delta) + 1);
		worm.setWorld(world);
		assertTrue(worm.canMove());
	}
	@Test
	public void test_canMove_noAP() {
		worm.setActionPoints(0);
		worm.setWorld(world);
		assertFalse(worm.canMove());
	}*/

	// }}

// {{ Tests for turning

	@Test
	public void test_turn() {
		worm.turn(Math.PI / 4);
		assertEquals(1.5707963267948966, worm.getDirection(), EPS);	// (Math.PI / 4 + Math.PI / 4) % (2*Math.PI) = 1.5707963267948966
	}

	@Test
	public void test_getActionPointCostTurn() {
		assertEquals(8, Worm.getActionPointCostTurn(Math.PI / 4), EPS);
		assertEquals(23, Worm.getActionPointCostTurn(3 * Math.PI / 4), EPS);
	}

	@Test
	public void test_canTurn_LegalCase() {
		assertTrue(worm.canTurn(Math.PI));
	}
	@Test
	public void test_canTurn_directionIsNaN() {
		assertFalse(worm.canTurn(Double.NaN));
	}
	@Test
	public void test_canTurn_costTooHigh() {
		assertFalse(worm.canTurn(worm.getActionPoints() + 1));
	}
	@Test
	public void test_canTurn_noAPLeft() {
		worm.setActionPoints(0);
		assertFalse(worm.canTurn(Math.PI));
	}

	// }}

// {{ Tests for jumping

	@Test
	public void test_jump() {																	// . . . X
		world = new World(4, 4, new boolean[][] {												// . . . X
					{true, true, true, false}, {true, true, true, false},						// w . . X
					{true, true, true, false}, {false, false, false, false} }, random);			// X X X X
		worm.setWorld(world);
		worm.setPosition(0, 2, Math.PI / 4);
		worm.jump(0.1);				// Timestep of 0.1 seconds, the method jumpTime(0.1) gives 0.5
		assertEquals(0, worm.getActionPoints(), EPS);
		assertEquals(1.5704233579764153, worm.getX(), EPS);
		assertEquals(2.0291241079745263, worm.getY(), EPS);
	}

	@Test
	public void test_canJump_LegalCase() {
		worm.setDirection(Math.PI / 4);
		assertTrue(worm.canJump());
	}
	@Test
	public void test_canJump_noAPLeft() {
		worm.setActionPoints(0);
		assertFalse(worm.canJump());
	}

	// }}

// {{ Tests for falling

	@Test
	public void test_Fall() {
		world = new World(3.0, 4.0, new boolean[][] {							// . X .
				{ true, false, true }, { true, true, true },					// . w .
				{ true, true, true }, { false, false, false } }, random);		// . . .
		worm = new Worm(1.5, 2.5, 3 * Math.PI / 2, 0.5, "TestWorm");			// X X X 
		worm.setWorld(world);
		assertFalse(worm.canFall());
		worm.move();
		assertTrue(worm.canFall());
		worm.fall();
		assertEquals(1.5, worm.getX(), EPS);
		assertTrue("Worm must land at adjacent location",
				Util.fuzzyBetween(1.5, 1.55, worm.getY(), EPS));
	}

	@Test
	public void test_canFall_LegalCase() {													// . . .
		world = new World(3, 5, new boolean[][] {											// . w .
				{true,  true, true}, {true, true, true},									// . . .
				{true,  true, true}, {true, true, true},									// . . . 
				{false, false, false} }, random);											// X X X
		worm.setWorld(world);
		worm.setPosition(1, 1, Math.PI / 4);
		assertTrue(worm.canFall());
	}
	@Test
	public void test_canFall_wormSafe() {
		world = new World(4, 4, new boolean[][] { {false, false, false, false},			// X X X X
												  {true,  true,  true,  true},			// . . . .
												  {true,  true,  true,  true },			// . . w .
												  {false, false, false, false}}			// X X X X
												, random);							
		worm.setWorld(world);
		worm.setPosition(2, 2, Math.PI / 4);
		assertFalse(worm.canFall());
	}

	// }}

// {{ Tests for shooting

	@Test
	public void test_getEquippedWeaponRifle() {
		worm.addNewWeapon(rifle);
		worm.equipWeapon(rifle);
		assertEquals(rifle, worm.getEquippedWeapon());
	}
	@Test
	public void test_getEquippedWeaponBazooka() {
		worm.addNewWeapon(bazooka);
		worm.equipWeapon(bazooka);
		assertEquals(bazooka, worm.getEquippedWeapon());
	}

	@Test
	public void test_equipNextWeapon() {
		worm.addNewWeapon(rifle);
		worm.addNewWeapon(bazooka);
		worm.equipWeapon(rifle);
		worm.equipNextWeapon();
		assertEquals(bazooka, worm.getEquippedWeapon());
	}

	@Test(expected = ModelException.class)
	public void test_shoot_noAP() {
		worm.setWorld(world);
		worm.addNewWeapon(rifle);
		worm.equipWeapon(rifle);
		worm.setActionPoints(0);
		worm.shoot(50);
	}
	@Test
	public void test_shoot_LegalCase() {
		worm.setWorld(world);
		worm.addNewWeapon(rifle);
		worm.equipWeapon(rifle);
		worm.shoot(50);
	}

	@Test
	/**
	 * @note	The invalid cases does not have to be tested, as the methods "isValidDirection" and "isValidActionPoints" are already tested.
	 */
	public void canShoot_LegalCase() {
		assertTrue(worm.canShoot());
	}

	// }}

// {{ Tests for eating

	@Test
	public void test_eat() {
		worm.eat(food);
		assertEquals(1.1, worm.getRadius(), EPS);
		assertTrue(food.isTerminated());
	}

	// }}

// {{ Tests for world association

	@Test
	public void test_setWorld_LegalCase() {
		worm.setWorld(world);
		assertEquals(world, worm.getWorld());
	}
	@Test(expected = ModelException.class)
	public void test_setWorld_worldNull() {
		worm.setWorld(null);
	}
	@Test(expected = ModelException.class)
	public void test_setWorld_worldTerminated() {
		world.terminate();
		worm.setWorld(world);
	}
	@Test
	public void test_removeWorld() {
		worm.removeWorld();
		assertEquals(null, worm.getWorld());
	}

	// }}

// {{ Tests for team association

	@Test
	public void test_setTeam_LegalCase() {
		worm.setTeam(team);
		assertEquals(team, worm.getTeam());
	}
	@Test(expected = ModelException.class)
	public void test_setTeam_teamNull() {
		worm.setTeam(null);
	}
	@Test(expected = ModelException.class)
	public void test_setTeam_teamTerminated() {
		team.terminate();
		worm.setTeam(team);
	}
	@Test(expected = ModelException.class)
	public void test_teamNull() {
		worm.setTeam(null);
	}
	@Test
	public void test_removeTeam() {
		worm.removeTeam();
		assertEquals(null, worm.getTeam());
	}

	// }}

// {{ Tests for weapon association

	@Test
	public void test_addNewWeapon() {
		worm.addNewWeapon(bazooka);
		assertTrue(worm.getWeapons().contains(bazooka));
	}

	@Test
	public void test_isValidWeapon_LegalCase() {
		worm.addNewWeapon(rifle);
	}
	@Test(expected = ModelException.class)
	public void test_isValidWeapon_weaponNull() {
		worm.addNewWeapon(null);
	}
	@Test(expected = ModelException.class)
	public void test_isValidWeapon_weaponTerminated() {
		bazooka.terminate();
		worm.addNewWeapon(bazooka);
	}

	@Test
	public void test_removeWeapon() {
		worm.addNewWeapon(bazooka);
		worm.addNewWeapon(rifle);
		worm.removeWeapon(bazooka);
		assertTrue(worm.getWeapons().contains(rifle));
		assertFalse(worm.getWeapons().contains(bazooka));
	}

	@Test
	public void test_hasAsWeapon() {
		worm.addNewWeapon(rifle);
		assertTrue(worm.hasAsWeapon(rifle));
	}

	// }}	

// {{ Test to get the teamname.

	@Test
	public void test_getTeamName() {
		worm.setTeam(team);
		assertEquals("FirstTeam", worm.getTeamName());
	}
}