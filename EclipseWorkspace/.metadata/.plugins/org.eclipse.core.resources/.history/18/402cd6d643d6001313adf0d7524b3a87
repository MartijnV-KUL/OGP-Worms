package worms.model;

import java.util.ArrayList;

import be.kuleuven.cs.som.annotate.Basic;
import be.kuleuven.cs.som.annotate.Raw;

public abstract class Statement {
	
	public Statement(ArrayList<Statement> statements, ArrayList<Expression> expressions) {
		for ( Statement statement : statements ) {
			this.statements.add(statement);
		}
		for ( Expression expression : expressions ) {
			this.expressions.add(expression);
		}
	}

//		ASSIGNMENT,
//		WHILE,
//		FOREACH,
//		IFTHENELSE,
//		PRINT,
//		SEQUENCE,
//		ACTION
	
// {{ Program Association

	private Program program;
	
	@Basic
	public Program getProgram() {
		return program;
	}
	
	@Raw
	void setProgram(Program program) {
		if (!canHaveAsProgram(program))
			throw new ModelException("Invalid program specified.");
		if (hasAProgram())
			throw new ModelException("Already has a program");
		this.program = program;
	}
	
	private static boolean canHaveAsProgram(Program program) {
		if (program == null)
			return false;
		if (program.isTerminated())
			return false;
		return true;
	}
	
	protected boolean hasAProgram() {
		return (!(program == null));
	}
	
	@Raw
	void removeProgram() {
		program = null;
	}
	
// }}
	
// {{ Statement Association

	private Statement parentStatement;
	
	@Basic
	public Statement getParentStatement() {
		return parentStatement;
	}
	
	void setParentStatement(Statement statement) {
		if (!canHaveAsStatement(statement))
			throw new ModelException("Invalid statement specified.");
		if (hasAStatement())
			throw new ModelException("Already has a statement");
		statement.setProgram(this);
		this.statement = statement;
	}
	
	private static boolean canHaveAsStatement(Statement statement) {
		if (statement == null)
			return false;
		if (statement.isTerminated())
			return false;
		return true;
	}
	
	protected boolean hasAParentStatement() {
		return (!(parentStatement == null));
	}
	
	void removeParentStatement() {
		if (hasAParentStatement())
			parentStatement.removestatement(this);
		statement = null;
	}
	private final ArrayList<Statement> statements = new ArrayList<Statement>();
	
	@Basic
	public ArrayList<Statement> getStatements() {
		return statements;
	}
	
	public void addStatement(Statement statement) throws ModelException {
		if (!canHaveAsStatement(statement))
			throw new ModelException("Invalid statement specified.");
		if (hasAsStatement(statement))
			throw new ModelException("Statement already in world.");
		statement.setParentStatement(this);
		statements.add(statement);
	}
	
	private static boolean canHaveAsStatement(Statement statement) {
		if (statement==null)
			return false;
		if (statement.isTerminated())
			return false;
		return true;
	}
	
	private boolean hasAsStatement(Statement statement) {
		return statements.contains(statement);
	}
	
	public void removeStatement(Statement statement) throws ModelException {
		if (!hasAsStatement(statement))
			throw new ModelException("Statement not found.");
		statement.removeProgram();
		statements.remove(statement);
	}
	
	private void removeAllStatements() {
		for ( Statement statement : statements ) {
			statement.removeParentStatement();
			removeStatement(statement);
		}
	}
	
	// }}
	
// {{ Terminated

	private boolean terminated;
	
	@Basic
	public boolean isTerminated() {
		return terminated;
	}
	
	public void terminate() {
		removeAllStatements();
		removeAllExpressions();
		terminated = true;
	}
	
	
	// }}

}
