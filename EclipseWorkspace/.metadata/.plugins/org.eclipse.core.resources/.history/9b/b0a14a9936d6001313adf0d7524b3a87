package worms.model;

import be.kuleuven.cs.som.annotate.Basic;
import be.kuleuven.cs.som.annotate.Raw;

public abstract class Expression {
	
	private final Types expressionType;
	
	protected Expression(Types expressionType) {
		this.expressionType = expressionType;
	}
	
	public Types getExpressionType() {
		return expressionType;
	}
	
	public abstract Type<?> evaluate() throws ModelException;
	
	public static enum Types {
		VARIABLE,
		DOUBLE,
		TRUE,
		FALSE,
		NULL,
		SELF,
		ADDITION,
		SUBTRACTION,
		MULTIPLICATION,
		DIVISION,
		SQUAREROOT,
		SINE,
		COSINE,
		CONJUNCTION,
		DISJUNCTION,
		NEGATION,
		LESSTHAN,
		LESSTHANOREQUALTO,
		GREATERTHAN,
		GREATERTHANOREQUALTO,
		EQUALTO,
		DIFFERENTFROM,
		GETX,
		GETY,
		GETRADIUS,
		GETDIR,
		GETAP,
		GETMAXAP,
		SAMETEAM,
		SEARCHOBJ,
		ISWORM,
		ISFOOD;
	}
	
	
// {{ Statement Association

	private Statement statement;
	
	@Basic
	public Statement getStatement() {
		return statement;
	}
	
	@Raw
	void setStatement(Statement statement) {
		if (!canHaveAsStatement(statement))
			throw new ModelException("Invalid program specified.");
		if (hasAStatement())
			throw new ModelException("Already has a program");
		this.statement = statement;
	}
	
	private static boolean canHaveAsStatement(Statement program) {
		if (program == null)
			return false;
		if (program.isTerminated())
			return false;
		return true;
	}
	
	protected boolean hasAStatement() {
		return (!(program == null));
	}
	
	@Raw
	void removeStatement() {
		program = null;
	}
	
// }}

}
