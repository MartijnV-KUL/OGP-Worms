package worms.model;

import java.util.List;

import worms.model.programs.*;

public class ProgramFactoryImpl implements ProgramFactory<Expression, Statement, Type<?>> {
	
	@Override
	public Expression createDoubleLiteral(int line, int column, double d) {
		return new ExpressionSingular(Expression.Types.DOUBLE, new Type<Double>(d));
	}

	@Override
	public Expression createBooleanLiteral(int line, int column, boolean b) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createAnd(int line, int column, Expression e1, Expression e2) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createOr(int line, int column, Expression e1, Expression e2) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createNot(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createNull(int line, int column) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createSelf(int line, int column) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createGetX(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createGetY(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createGetRadius(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createGetDir(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createGetAP(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createGetMaxAP(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createGetHP(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createGetMaxHP(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createSameTeam(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createSearchObj(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createIsWorm(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createIsFood(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createVariableAccess(int line, int column, String name) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createLessThan(int line, int column, Expression e1, Expression e2) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createGreaterThan(int line, int column, Expression e1, Expression e2) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createLessThanOrEqualTo(int line, int column, Expression e1,
			Expression e2) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createGreaterThanOrEqualTo(int line, int column, Expression e1,
			Expression e2) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createEquality(int line, int column, Expression e1, Expression e2) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createInequality(int line, int column, Expression e1, Expression e2) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createAdd(int line, int column, Expression e1, Expression e2) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createSubtraction(int line, int column, Expression e1, Expression e2) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createMul(int line, int column, Expression e1, Expression e2) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createDivision(int line, int column, Expression e1, Expression e2) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createSqrt(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createSin(int line, int column, Expression e) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Expression createCos(int line, int column, Expression e) {
		return new ExpressionSingular(Expression.Types.COSINE, e);
	}

	@Override
	public Statement createTurn(int line, int column, Expression angle) {
		return new StatementAction(StatementAction.ActionTypes.TURN, angle);
	}

	@Override
	public Statement createMove(int line, int column) {
		return new StatementAction(StatementAction.ActionTypes.MOVE);
	}

	@Override
	public Statement createJump(int line, int column) {
		return new StatementAction(StatementAction.ActionTypes.JUMP);
	}

	@Override
	public Statement createToggleWeap(int line, int column) {
		return new StatementAction(StatementAction.ActionTypes.TOGGLEWEAP);
	}

	@Override
	public Statement createFire(int line, int column, Expression yield) {
		return new StatementAction(StatementAction.ActionTypes.FIRE, yield);
	}

	@Override
	public Statement createSkip(int line, int column) {
		return new StatementAction(StatementAction.ActionTypes.SKIP);
	}

	@Override
	public Statement createAssignment(int line, int column, String variableName,
			Expression rhs) {
		return new StatementAssignment(variableName, rhs);
	}

	@Override
	public Statement createIf(int line, int column, Expression condition, Statement then,
			Statement otherwise) {
		return new StatementIfThenElse(condition, then, otherwise);
	}

	@Override
	public Statement createWhile(int line, int column, Expression condition,
			Statement body) {
		return new StatementWhile(condition, body);
	}

	@Override
	public Statement createForeach(int line, int column, ForeachType type,
			String variableName, Statement body) {
		return new StatementForEach(type, variableName, body);
	}

	@Override
	public Statement createSequence(int line, int column, List<Statement> statements) {
		return new StatementSequence(statements);
	}

	@Override
	public Statement createPrint(int line, int column, Expression e) {
		return new StatementPrint(e);
	}

	@Override
	public Type<?> createDoubleType() {
		return new Type<Double>();
	}

	@Override
	public Type<?> createBooleanType() {
		return new Type<Boolean>();
	}

	@Override
	public Type<?> createEntityType() {
		return new Type<Entity>();
	}

}
