package worms.model;

import be.kuleuven.cs.som.annotate.*;

public class Food {
	
	private double x;
	private double y;
	private final double radius = 0.20;
	private boolean terminated;
	
	private World world;
	
	public Food(double x, double y) {
		setX(x);
		setY(y);
	}

	// {{ x related
	/**
	 * Basic inspector for the x coordinate. 
	 * @return this.x
	 */
	@Basic
	public double getX() {
		return this.x;
	}
	
	/**
	 * Checker for the x-coordinate.
	 * @param x x-coordinate
	 * @return !isNaN(x)
	 */
	public boolean isValidX(double x) {
		return (!Double.isNaN(x));
	}
	
	/**
	 * Setter for the x-coordinate
	 * @param x x-coordinate
	 * @throws ModelException
	 * 		| !isValid(x)
	 */
	public void setX(double x) throws ModelException {
		if (!isValidX(x))
			throw new ModelException("Invalid x-coordinate.");
		this.x = x;
	}
	// }}
	
	// {{ y related
	/**
	 * Basic inspector for the y coordinate. 
	 * @return this.y
	 */
	@Basic
	public double getY() {
		return this.y;
	}
	
	/**
	 * Checker for the y-coordinate.
	 * @param y y-coordinate
	 * @return !isNaN(y)
	 */
	public boolean isValidY(double y) {
		return (!Double.isNaN(y));
	}
	
	/**
	 * Setter for the y-coordinate
	 * @param y y-coordinate
	 * @throws ModelException
	 * 		| !isValid(y)
	 */
	public void setY(double y) throws ModelException {
		if (!isValidY(y))
			throw new ModelException("Invalid y-coordinate");
		this.y = y;
	}
	// }}

	// {{ radius related
	/**
	 * Basic inspector for the radius.
	 * @return this.radius
	 */
	@Basic @Immutable
	public double getRadius() {
		return radius;
	}
	// }}
	
	// {{ association related
	public void setWorld(World newWorld) throws ModelException {
		if (!canHaveAsWorld(newWorld))
			throw new ModelException("Invalid world specified");
		world = newWorld;
	}
	
	public boolean canHaveAsWorld(World world) {
		if (world==null)
			return false;
		return true;
	}
	// }}
	
	// {{ terminated related
	@Basic
	public boolean isTerminated() {
		return terminated;
	}
	
	public void terminate() {
		try {
			// if world is still "null" (because a food object can have 0 or 1 worlds, this throws a nullpointerexception
			world.removeFood(this);
		} catch (NullPointerException e) {
			// do nothing
		}
		terminated = true;
	}
	// }}

}
