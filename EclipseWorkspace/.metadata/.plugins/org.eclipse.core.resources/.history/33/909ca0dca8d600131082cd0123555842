package worms.model;

import java.util.ArrayList;

import worms.model.programs.ProgramFactory.ForeachType;

public class StatementForEach extends Statement {
	
	private final ForeachType type;
	private final String variable;
	
	public StatementForEach(ForeachType type, String variable, Statement s) {
		super(new Statement[] {s}, new Expression[0]);
		this.type = type;
		this.variable = variable;
	}

	@Override
	public void execute() {
		if ( type == ForeachType.WORM ) {
			for ( Worm worm : getProgram().getWorm().getWorld().getWorms() ) {
				Statement s = new StatementAssignment(variable, new ExpressionSingular(Expression.Types.SELF, new Type<Entity>(new Entity(worm))));
				s.execute();
				getStatements().get(0).execute();
			}
		}
		if ( type == ForeachType.FOOD ) {
			for ( Food food : getProgram().getWorm().getWorld().getFood() ) {
				Statement s = new StatementAssignment(variable, new ExpressionSingular(Expression.Types.SELF, new Type<Entity>(new Entity(food))));
				s.execute();
				getStatements().get(0).execute();
			}
		}
		if ( type == ForeachType.ANY ) {
			ArrayList<Worm> worms = getProgram().getWorm().getWorld().getWorms();
			ArrayList<Food> food = getProgram().getWorm().getWorld().getFood();
			ArrayList<Object> objects = 
			for ( Food food : getProgram().getWorm().getWorld().getFood() ) {
				Statement s = new StatementAssignment(variable, new ExpressionSingular(Expression.Types.SELF, new Type<Entity>(new Entity(food))));
				s.execute();
				getStatements().get(0).execute();
			}
		}
		// TODO Auto-generated method stub

	}

	@Override
	public boolean containsActionStatement() {
		return getStatements().get(0).containsActionStatement();
	}

}
