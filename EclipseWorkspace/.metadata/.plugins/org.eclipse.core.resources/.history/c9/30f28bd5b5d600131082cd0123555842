package worms.model;

import java.util.ArrayList;

import worms.model.programs.ProgramFactory.ForeachType;

public class StatementForEach extends Statement {
	
	private final ForeachType type;
	private final String variable;
	
	public StatementForEach(int line, int column, ForeachType type, String variable, Statement s) {
		super(line, column, new Statement[] {s}, new Expression[0]);
		this.type = type;
		this.variable = variable;
	}

	@Override
	public void execute() {
		Statement statement = this;
		while ( statement.hasAParentStatement() ) {
			statement = statement.getParentStatement();
		}
		Program program = statement.getProgram();
		
		if ( type == ForeachType.WORM ) {
			for ( Worm worm : getProgram().getWorm().getWorld().getWorms() ) {
				program.assignVariable(variable, Type<Entitye->(worm));
				Statement s = new StatementAssignment(getLine(),getColumn(),variable, new ExpressionSingular(Expression.Types.SELF, new Type<Entity>(new Entity(worm))));
				s.execute();
				getStatements().get(0).execute();
			}
		}
		if ( type == ForeachType.FOOD ) {
			for ( Food food : getProgram().getWorm().getWorld().getFood() ) {
				Statement s = new StatementAssignment(getLine(),getColumn(),variable, new ExpressionSingular(Expression.Types.SELF, new Type<Entity>(new Entity(food))));
				s.execute();
				getStatements().get(0).execute();
			}
		}
		if ( type == ForeachType.ANY ) {
			ArrayList<Object> objects = new ArrayList<Object>();
			objects.addAll(getProgram().getWorm().getWorld().getWorms());
			objects.addAll(getProgram().getWorm().getWorld().getFood());
			for ( Object obj : objects ) {
				Statement s = new StatementAssignment(getLine(),getColumn(),variable, new ExpressionSingular(Expression.Types.SELF, new Type<Entity>(new Entity(obj))));
				s.execute();
				getStatements().get(0).execute();
			}
		}
	}

	@Override
	public boolean containsActionStatement() {
		return getStatements().get(0).containsActionStatement();
	}
	
	@Override
	public boolean isWellFormed() {
		return (!containsActionStatement());
	}

}
