package worms.model;

import java.util.ArrayList;

import be.kuleuven.cs.som.annotate.Basic;
import be.kuleuven.cs.som.annotate.Raw;

public abstract class Statement {

	private final ArrayList<Statement> statements;
	private final ArrayList<Expression> expressions;
	
	public Statement(ArrayList<Statement> statements, ArrayList<Expression> expressions) {
		this.statements = statements;
		this.expressions = expressions;
	}

//		ASSIGNMENT,
//		WHILE,
//		FOREACH,
//		IFTHENELSE,
//		PRINT,
//		SEQUENCE,
//		ACTION
	
// {{ Program Association

	private Program program;
	
	@Basic
	public Program getProgram() {
		return program;
	}
	
	@Raw
	void setProgram(Program program) {
		if (!canHaveAsProgram(program))
			throw new ModelException("Invalid program specified.");
		if (hasAProgram())
			throw new ModelException("Already has a program");
		this.program = program;
	}
	
	private static boolean canHaveAsProgram(Program program) {
		if (program == null)
			return false;
		if (program.isTerminated())
			return false;
		return true;
	}
	
	protected boolean hasAProgram() {
		return (!(program == null));
	}
	
	@Raw
	void removeProgram() {
		program = null;
	}
	
// }}
	
// {{ Terminated

	private boolean terminated;
	
	@Basic
	public boolean isTerminated() {
		return terminated;
	}
	
	public void terminate() {
		if (hasAProgram())
			program.removeStatement(this);
		terminated = true;
	}
	
	
	// }}

}
